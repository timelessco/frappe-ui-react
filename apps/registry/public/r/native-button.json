{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "native-button",
  "type": "registry:ui",
  "title": "Button",
  "description": "A button component",
  "dependencies": [
    "react-native",
    "react-native-reanimated"
  ],
  "files": [
    {
      "path": "registry/native/default/ui/button.tsx",
      "content": "// @ts-nocheck\nimport React, { PropsWithChildren, useCallback } from \"react\";\nimport {\n\tGestureResponderEvent,\n\tPressable,\n\tPressableProps,\n\tText,\n} from \"react-native\";\nimport Animated from \"react-native-reanimated\";\n\nimport { useHaptic } from \"@/hooks/useHaptic\";\nimport { useScaleAnimation } from \"@/hooks/useScaleAnimation\";\nimport Icon from \"@/components/ui/icon\";\nimport { cx, passProps, RenderPropType } from \"@/lib/utils\";\n\ntype ButtonSize = \"sm\" | \"md\" | \"lg\" | \"xl\" | \"2xl\";\ntype ButtonVariant = \"solid\" | \"outline\" | \"ghost\" | \"subtle\";\ntype ButtonTheme = \"default\";\n\nconst AnimatedPressable = Animated.createAnimatedComponent(Pressable);\ninterface ButtonProps extends PressableProps {\n\t/**\n\t * How large should the button be?\n\t *\n\t * @default md\n\t */\n\tsize: ButtonSize;\n\t/**\n\t * How the button should look?\n\t *\n\t * @default solid\n\t */\n\tvariant: ButtonVariant;\n\t/**\n\t * How the button should be themed?\n\t *\n\t * @default default\n\t */\n\tthemeColor: ButtonTheme;\n\t/**\n\t * A Suffix Element.\n\t * If added, the Button will show a suffix Element before the Button's text.\n\t */\n\tsuffix: RenderPropType;\n\t/**\n\t * A Prefix Element.\n\t * If added, the Button will show a prefix Element after the Button's text.\n\t */\n\tprefix: RenderPropType;\n\t/**\n\t * If added, the button will only show an icon ignoring other children.\n\t */\n\ticonOnly: RenderPropType;\n\t/**\n\t * If added, the button will show this spinner components\n\t *\n\t * @default \"<Spinner />\"\n\t */\n\tspinner: RenderPropType;\n\t/**\n\t * The Text style of the Tag component.\n\t * @default {}\n\t */\n\ttextClassName: string;\n\t/**\n\t * When a view is marked as accessible,\n\t * it is a good practice to set an accessibilityLabel on the view,\n\t * so that people who use VoiceOver know what element they have selected.\n\t * VoiceOver will read this string when a user selects the associated element.\n\t */\n\taccessibilityLabel: string;\n\t/**\n\t * When set to true, The Tap creates a Touch Feedback\n\t * Check more -> https://docs.expo.dev/versions/latest/sdk/haptics/\n\t * @default true\n\t */\n\thapticEnabled: boolean;\n\t/**\n\t * When set to true, The Button will scale down when pressed\n\t * @default true\n\t */\n\tscaleAnimationEnabled: boolean;\n}\n\nexport const Button = (\n\tbuttonProps: PropsWithChildren<Partial<ButtonProps>>,\n) => {\n\tconst {\n\t\tchildren,\n\t\tclassName,\n\t\tsize = \"md\",\n\t\tvariant = \"solid\",\n\t\tdisabled,\n\t\tthemeColor = \"default\",\n\t\ttextClassName = \"\",\n\t\tprefix,\n\t\tsuffix,\n\t\ticonOnly,\n\t\thapticEnabled = true,\n\t\tscaleAnimationEnabled = true,\n\t\tonPress,\n\t\t...otherButtonProps\n\t} = buttonProps;\n\n\tconst haptic = useHaptic(\"selection\");\n\tconst { animatedStyle, handlers } = useScaleAnimation();\n\n\t/**\n\t * Button Prefix Component\n\t */\n\tconst _prefix = prefix ? (\n\t\t<Icon\n\t\t\tsize={buttonTheme.size[size].iconSize}\n\t\t\ticon={passProps(prefix, {\n\t\t\t\tclassName:\n\t\t\t\t\tbuttonTheme.theme[themeColor].variant[variant].iconFill[\n\t\t\t\t\t\tdisabled ? \"disabled\" : \"default\"\n\t\t\t\t\t],\n\t\t\t})}\n\t\t/>\n\t) : null;\n\n\tconst _suffix = suffix ? (\n\t\t<Icon\n\t\t\tsize={buttonTheme.size[size].iconSize}\n\t\t\ticon={passProps(suffix, {\n\t\t\t\tclassName:\n\t\t\t\t\tbuttonTheme.theme[themeColor].variant[variant].iconFill[\n\t\t\t\t\t\tdisabled ? \"disabled\" : \"default\"\n\t\t\t\t\t],\n\t\t\t})}\n\t\t/>\n\t) : null;\n\n\tconst handlePress = useCallback(\n\t\t(e: GestureResponderEvent) => {\n\t\t\tif (hapticEnabled) haptic?.();\n\t\t\tonPress?.(e);\n\t\t},\n\t\t[hapticEnabled, haptic, onPress],\n\t);\n\n\tconst _iconOnly = iconOnly ? (\n\t\t<Icon\n\t\t\tsize={buttonTheme.size[size].iconSize}\n\t\t\ticon={passProps(iconOnly, {\n\t\t\t\tclassName:\n\t\t\t\t\tbuttonTheme.theme[themeColor].variant[variant].iconFill[\n\t\t\t\t\t\tdisabled ? \"disabled\" : \"default\"\n\t\t\t\t\t],\n\t\t\t})}\n\t\t/>\n\t) : null;\n\n\treturn (\n\t\t<AnimatedPressable\n\t\t\tdisabled={disabled}\n\t\t\tclassName={cx(\n\t\t\t\tbuttonTheme.container,\n\t\t\t\tbuttonTheme.size[size].default,\n\t\t\t\tbuttonTheme.theme[themeColor].variant[variant].container[\n\t\t\t\t\tdisabled ? \"disabled\" : \"wrapper\"\n\t\t\t\t],\n\t\t\t\t!iconOnly && buttonTheme.size[size].withoutIcon,\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t\t{...otherButtonProps}\n\t\t\t{...(scaleAnimationEnabled ? handlers : {})}\n\t\t\tonPress={handlePress}\n\t\t\tstyle={animatedStyle}\n\t\t>\n\t\t\t{_iconOnly ? (\n\t\t\t\t<>{_iconOnly}</>\n\t\t\t) : (\n\t\t\t\t<>\n\t\t\t\t\t{_prefix}\n\t\t\t\t\t<Text\n\t\t\t\t\t\tclassName={cx(\n\t\t\t\t\t\t\tbuttonTheme.size[size].text,\n\t\t\t\t\t\t\tbuttonTheme.theme[themeColor].variant[variant].text[\n\t\t\t\t\t\t\t\tdisabled ? \"disabled\" : \"default\"\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\ttextClassName,\n\t\t\t\t\t\t)}\n\t\t\t\t\t>\n\t\t\t\t\t\t{children}\n\t\t\t\t\t</Text>\n\t\t\t\t\t{_suffix}\n\t\t\t\t</>\n\t\t\t)}\n\t\t</AnimatedPressable>\n\t);\n};\n\nexport const buttonTheme = {\n\tcontainer: \"relative flex flex-row items-center justify-center gap-2\",\n\n\ttheme: {\n\t\tdefault: {\n\t\t\tvariant: {\n\t\t\t\tsolid: {\n\t\t\t\t\tcontainer: {\n\t\t\t\t\t\twrapper: \"bg-surface-gray-7 active:bg-surface-gray-6\",\n\t\t\t\t\t\tdisabled: \"bg-surface-gray-2\",\n\t\t\t\t\t},\n\t\t\t\t\ticonFill: {\n\t\t\t\t\t\tdefault: \"fill-ink-white\",\n\t\t\t\t\t\tdisabled: \"fill-ink-gray-4\",\n\t\t\t\t\t},\n\t\t\t\t\ttext: {\n\t\t\t\t\t\tdefault: \"text-ink-white\",\n\t\t\t\t\t\tdisabled: \"text-ink-gray-4\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tsubtle: {\n\t\t\t\t\tcontainer: {\n\t\t\t\t\t\twrapper: \"bg-surface-gray-2 active:bg-surface-gray-3\",\n\t\t\t\t\t\tdisabled: \"bg-surface-gray-2\",\n\t\t\t\t\t},\n\t\t\t\t\ticonFill: {\n\t\t\t\t\t\tdefault: \"fill-ink-gray-7\",\n\t\t\t\t\t\tdisabled: \"fill-ink-gray-4\",\n\t\t\t\t\t},\n\t\t\t\t\ttext: {\n\t\t\t\t\t\tdefault: \"text-ink-gray-7\",\n\t\t\t\t\t\tdisabled: \"text-ink-gray-4\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\toutline: {\n\t\t\t\t\tcontainer: {\n\t\t\t\t\t\twrapper:\n\t\t\t\t\t\t\t\"border border-outline-gray-2 active:border-outline-gray-3\",\n\t\t\t\t\t\tdisabled: \"border bg-surface-gray-2 border-outline-gray-2\",\n\t\t\t\t\t},\n\t\t\t\t\ticonFill: {\n\t\t\t\t\t\tdefault: \"fill-ink-gray-7\",\n\t\t\t\t\t\tdisabled: \"fill-ink-gray-4\",\n\t\t\t\t\t},\n\t\t\t\t\ttext: {\n\t\t\t\t\t\tdefault: \"text-ink-gray-7\",\n\t\t\t\t\t\tdisabled: \"text-ink-gray-4\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tghost: {\n\t\t\t\t\tcontainer: {\n\t\t\t\t\t\twrapper: \"bg-transparent active:bg-surface-gray-3\",\n\t\t\t\t\t\tdisabled: \"bg-transparent\",\n\t\t\t\t\t},\n\t\t\t\t\ticonFill: {\n\t\t\t\t\t\tdefault: \"fill-ink-gray-7\",\n\t\t\t\t\t\tdisabled: \"fill-ink-gray-4\",\n\t\t\t\t\t},\n\t\t\t\t\ttext: {\n\t\t\t\t\t\tdefault: \"text-ink-gray-7\",\n\t\t\t\t\t\tdisabled: \"text-ink-gray-4\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\tsize: {\n\t\tsm: {\n\t\t\tdefault: \"min-h-7 min-w-7 rounded-ef-4\",\n\t\t\ticonSize: 16,\n\t\t\twithoutIcon: \"px-2\",\n\t\t\ttext: \"text-sm font-regular\",\n\t\t},\n\t\tmd: {\n\t\t\tdefault: \"min-h-8 min-w-8 rounded-ef-4\",\n\t\t\ticonSize: 18,\n\t\t\twithoutIcon: \"px-2.5\",\n\t\t\ttext: \"text-sm font-medium\",\n\t\t},\n\t\tlg: {\n\t\t\tdefault: \"min-h-10 min-w-10 rounded-ef-5\",\n\t\t\ticonSize: 20,\n\t\t\twithoutIcon: \"px-3\",\n\t\t\ttext: \"text-base font-medium\",\n\t\t},\n\t\txl: {\n\t\t\tdefault: \"min-h-[46px] min-w-[46px] rounded-ef-6\",\n\t\t\ticonSize: 24,\n\t\t\twithoutIcon: \"px-3.5\",\n\t\t\ttext: \"text-[18px] font-medium\",\n\t\t},\n\t\t\"2xl\": {\n\t\t\tdefault: \"min-h-[52px] min-w-[52px] rounded-ef-7\",\n\t\t\ticonSize: 24,\n\t\t\twithoutIcon: \"px-4\",\n\t\t\ttext: \"text-xl font-medium\",\n\t\t},\n\t},\n};\n",
      "type": "registry:ui"
    }
  ],
  "meta": {
    "native": true
  },
  "categories": [
    "primitives"
  ]
}