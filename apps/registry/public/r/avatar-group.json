{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "avatar-group",
  "type": "registry:ui",
  "title": "Avatar Group",
  "description": "An avatar group component",
  "dependencies": [
    "class-variance-authority"
  ],
  "registryDependencies": [
    "https://frappe-ui-react.tmls.dev/r/utils.json",
    "https://frappe-ui-react.tmls.dev/r/avatar.json"
  ],
  "files": [
    {
      "path": "registry/web/default/ui/avatar-group.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { cva } from \"class-variance-authority\";\n\nimport {\n\tAvatar,\n\tAvatarFallback,\n\ttype AvatarProps,\n} from \"@/components/ui/avatar\";\nimport { cn } from \"@/lib/utils\";\n\ninterface AvatarGroupContextValue {\n\tsize?: NonNullable<AvatarProps[\"size\"]>;\n\tsquared?: NonNullable<AvatarProps[\"squared\"]>;\n}\n\nconst AvatarGroupContext = React.createContext<AvatarGroupContextValue>({});\n\nexport const useAvatarGroupContext = () => React.useContext(AvatarGroupContext);\n\nconst avatarGroupVariants = cva(\"flex items-center\", {\n\tvariants: {\n\t\tsize: {\n\t\t\txs: \"-space-x-0.5\",\n\t\t\tsm: \"-space-x-1\",\n\t\t\tmd: \"-space-x-1\",\n\t\t\tlg: \"-space-x-1\",\n\t\t\txl: \"-space-x-1\",\n\t\t\t\"2xl\": \"-space-x-1.5\",\n\t\t\t\"3xl\": \"-space-x-2\",\n\t\t},\n\t},\n\tdefaultVariants: {\n\t\tsize: \"md\",\n\t},\n});\n\ninterface AvatarGroupProps\n\textends AvatarGroupContextValue,\n\t\tReact.HTMLAttributes<HTMLDivElement> {\n\tchildren: React.ReactNode;\n\tmax?: number;\n}\n\nconst AvatarGroup = React.forwardRef<HTMLDivElement, AvatarGroupProps>(\n\t({ children, className, size, squared, max, ...props }, ref) => {\n\t\tconst { size: labelSize, squared: labelSquared } = React.useContext(\n\t\t\tAvatarLabelGroupContext,\n\t\t);\n\n\t\tconst contextValue = React.useMemo(\n\t\t\t() => ({\n\t\t\t\tsize: size ?? labelSize ?? \"md\",\n\t\t\t\tsquared: squared ?? labelSquared ?? false,\n\t\t\t}),\n\t\t\t[size, squared, labelSize, labelSquared],\n\t\t);\n\n\t\tconst avatarArray = React.Children.toArray(children);\n\t\tconst visibleAvatars = max ? avatarArray.slice(0, max) : avatarArray;\n\t\tconst excess = max ? avatarArray.length - max : 0;\n\n\t\treturn (\n\t\t\t<AvatarGroupContext.Provider value={contextValue}>\n\t\t\t\t<div\n\t\t\t\t\tref={ref}\n\t\t\t\t\tclassName={cn(avatarGroupVariants({ size }), className)}\n\t\t\t\t\t{...props}\n\t\t\t\t>\n\t\t\t\t\t{visibleAvatars.map((avatar, index) => (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t// eslint-disable-next-line react/no-array-index-key\n\t\t\t\t\t\t\tkey={`avatar-${index}`}\n\t\t\t\t\t\t\tstyle={{ zIndex: visibleAvatars.length - index }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{avatar}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))}\n\t\t\t\t\t{excess > 0 && (\n\t\t\t\t\t\t<Avatar>\n\t\t\t\t\t\t\t<AvatarFallback>{excess}</AvatarFallback>\n\t\t\t\t\t\t</Avatar>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t</AvatarGroupContext.Provider>\n\t\t);\n\t},\n);\nAvatarGroup.displayName = \"AvatarGroup\";\n\nconst AvatarLabelGroupContext = React.createContext<AvatarGroupContextValue>(\n\t{},\n);\n\ninterface AvatarLabelGroupProps\n\textends AvatarGroupContextValue,\n\t\tReact.HTMLAttributes<HTMLDivElement> {\n\tchildren: React.ReactNode;\n}\n\nconst AvatarLabelGroup = React.forwardRef<\n\tHTMLDivElement,\n\tAvatarLabelGroupProps\n>(({ children, className, size, squared, ...props }, ref) => {\n\tconst contextValue = React.useMemo(\n\t\t() => ({ size, squared }),\n\t\t[size, squared],\n\t);\n\n\treturn (\n\t\t<AvatarLabelGroupContext.Provider value={contextValue}>\n\t\t\t<div ref={ref} className={cn(\"flex items-center\", className)} {...props}>\n\t\t\t\t{children}\n\t\t\t</div>\n\t\t</AvatarLabelGroupContext.Provider>\n\t);\n});\n\nAvatarLabelGroup.displayName = \"AvatarLabelGroup\";\n\ninterface AvatarLabelProps extends React.HTMLAttributes<HTMLDivElement> {\n\tchildren: React.ReactNode;\n}\n\nconst AvatarLabel = React.forwardRef<HTMLDivElement, AvatarLabelProps>(\n\t({ children, className, ...props }, ref) => {\n\t\tconst { size } = React.useContext(AvatarLabelGroupContext);\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tref={ref}\n\t\t\t\tclassName={cn(labelVariants({ size }), className)}\n\t\t\t\t{...props}\n\t\t\t>\n\t\t\t\t{children}\n\t\t\t</div>\n\t\t);\n\t},\n);\nAvatarLabel.displayName = \"AvatarLabel\";\n\nexport { AvatarGroup, AvatarLabel, AvatarLabelGroup };\n\nconst labelVariants = cva(\"font-medium leading-[115%] text-ink-gray-7\", {\n\tvariants: {\n\t\tsize: {\n\t\t\txs: \"mr-ef-8 text-ef-tiny\",\n\t\t\tsm: \"mr-ef-8 text-ef-tiny\",\n\t\t\tmd: \"mr-ef-12 text-ef-xs\",\n\t\t\tlg: \"mr-ef-12 text-ef-base tracking-[0.07px]\",\n\t\t\txl: \"mr-ef-12 text-ef-lg tracking-[0.16px]\",\n\t\t\t\"2xl\": \"mr-ef-13 text-ef-xl tracking-[0.18px]\",\n\t\t\t\"3xl\": \"mr-ef-13 text-ef-2xl tracking-[0.1px]\",\n\t\t},\n\t},\n\tdefaultVariants: {\n\t\tsize: \"md\",\n\t},\n});\n",
      "type": "registry:ui"
    }
  ],
  "categories": [
    "primitives"
  ]
}